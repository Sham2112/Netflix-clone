{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","class","videoId","opts","height","widht","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backdropPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3de2362.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport axios from './axios.js'   //importing the instance from axios.js\n// import requests from './request.js';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n    const [movies, setMovies] = useState( [] );\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\n\n    useEffect(() => {\n        //if [] run once when the row loads and then don't load again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n\n    }, [fetchUrl]);\n\n    const opts = {\n        height: \"390\",\n        widht: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        }\n    }\n\n    const handleClick = (movie) => {\n        if(trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then(url => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            }).catch(error => console.log(error));\n        }\n    }\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                    <img\n                    key={movie.id} \n                    onClick={() => handleClick(movie)} \n                    className={\"row_poster \" + (isLargeRow && \"row_posterLarge\")}\n                    src={base_url + (isLargeRow ? movie.poster_path : movie.backdrop_path)} \n                    alt={movie.name} />\n                ))}\n            </div>\n            {trailerUrl && <div class=\"vid\">\n                 <YouTube videoId={trailerUrl} opts={opts} />\n            </div>}\n        </div>\n    )\n}\n\nexport default Row","const API_KEY = 'e5439fd7167f07d0de81a91a76964ca1';\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n  };\n  \nexport default requests;","import React, { useState, useEffect } from 'react';\nimport axios from './axios.js';\nimport requests from './request';\nimport './Banner.css';\n\nfunction Banner() {\n    const [movie, setMovie] = useState();\n    useEffect(() => {\n      async function fetchData() {\n        const request = await axios.get(requests.fetchNetflixOriginals);\n        setMovie(\n          request.data.results[\n            Math.floor(Math.random() * request.data.results.length - 1)\n          ]\n        );\n        return request;\n      }\n      fetchData();\n    }, []);\n  \n    function truncate(str, n) {\n      return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n    }\n  \n    return (\n      <header\n        className=\"banner\"\n        style={{\n          backgroundSize: \"cover\",\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\n          backdropPosition: \"center center\",\n        }}\n      >\n     \n        <div className=\"banner_contents\">\n        \n          <h1 className=\"banner_title\">\n            {movie?.title || movie?.name || movie?.original_name}\n          </h1> \n \n          <div className=\"banner_buttons\">\n            <button className=\"banner_button\">Play</button>\n            <button className=\"banner_button\">My List </button>\n          </div>\n  \n          <h1 className=\"banner_description\">{truncate(movie?.overview, 200)}</h1>\n        </div>\n        <div className=\"banner_fadeBottom\" />\n      </header>\n    );\n  }\n  \n  export default Banner;\n  \n","import React, { useEffect, useState } from 'react';\nimport './Nav.css';\n\nfunction Nav() {\n\n    const [show, handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n          if (window.scrollY > 100) {\n            handleShow(true);\n          } else {\n            handleShow(false);\n          }\n        });\n        return () => {\n          window.removeEventListener(\"scroll\");\n        };\n      }, []);\n\n    return(\n        <div className={\"nav \" + ( show && \"nav_black\")}>\n            <img \n            className=\"nav_logo\" \n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\" \n            alt=\"Netflix Logo\" />\n\n            <img\n            className=\"nav_avatar\"\n            src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\n            alt=\"Avatar\" />\n\n        </div>\n    )\n}\n\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Row from './Row.js';\nimport requests from './request.js';\nimport Banner from './Banner.js';\nimport Nav from './Nav.js';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n\n      <Banner />\n\n      <Row title=\"NETFLIX ORIGINAL\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} /> \n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}